#%RAML 1.0
title: GitHub API
version: v1
baseUri: https://m.nearb.com/v1
mediaType:  application/json

uses:
  locations: types/locations.raml
  stores: types/stores.raml
  users: types/users.raml
  marketing: types/marketing.raml
  products: types/product.raml
  alerts: types/alerts.raml

traits:
  engaged:
    queryParameters:
      engagement:
        type: string
        description: |
          The token that was used to grant access to this Store.
          This toke will be auto generated when fetching the Ad, and embedded in the store link.
        example: ?engagement=J1qK1c18UUGJFAzz9xnH56584l4


/stores:
  get:
    description: Lists all the stores, filtered by position if location data is provided
    queryParameters:
      locations?:
        type: string
        description: csv list of location ids
      beacons?:
        type: string
        description: |
          Set of fingerprints expressed as [mac=level] tuples. In the example we have two fingerprints,
          the first one is [24:a4:3c:9e:d2:84=16] and the second [32:a4:3c:9e:d2:84=10]
        example: ?24%3Aa4%3A3c%3A9e%3Ad2%3A84%3D16%2C32%3Aa4%3A3c%3A9e%3Ad2%3A84%3D10
    responses:
      200:
        body:
          application/json:
            type: stores.SuccessStores

  /{storeId}:
    get:
      description: Retrieve the given Store
      responses:
        200:
          body:
            application/json:
              type: stores.SuccessStore
    put:
      description: Update Store
      body:
        application/json:
          type: stores.Store
      responses:
        200:
          description: Returns the updated Store
          body:
            application/json:
              type: stores.SuccessStore
    /products:
      get:
        description: List the products for the given Store
        is: [engaged]
        queryParameters:
          tags?:
            type: string[]
            description: Set of tags used to filter the products
        responses:
          200:
            body:
              application/json:
                type: products.SuccessProducts

/users:
  post:
    body:
      application/json:
        type: users.Owner | users.Client
    responses:
      200:
        description: Returns the updated User
        body:
          application/json:
            type: users.Owner | users.Client

  /{userId}:
    get:
      responses:
        200:
          body:
            application/json:
              type: users.SuccessUser
    put:
      body:
        application/json:
          type: users.Owner | users.Client
      responses:
        200:
          description: Returns the updated User
          body:
            application/json:
              type: users.Owner | users.Client

    /alerts:
      get:
        description: Lists all the Alerts a given user has configured
        responses:
          200:
            body:
              application/json:
                type: alerts.SuccessAlerts
      post:
        description: Associates a new Alert to the pool of Alerts that can be triggered for a given user
        body:
          application/json:
            type: alerts.Alert

        responses:
          200:
            body:
              application/json:
                type: alerts.SuccessAlerts
/promotions:
  get:
    queryParameters:
      tags?:
        type: string[]
        description: Set of tags used to filter what ads should be shown to the user
      locations?:
        type: string
        description: csv list of location ids
      beacon?:
        type: string
        description: |
          Set of fingerprints expressed as [mac=level] tuples. In the example we have two fingerprints,
          the first one is [24:a4:3c:9e:d2:84=16] and the second [32:a4:3c:9e:d2:84=10]
        example: ?24%3Aa4%3A3c%3A9e%3Ad2%3A84%3D16%2C32%3Aa4%3A3c%3A9e%3Ad2%3A84%3D10
    responses:
      200:
        body:
          application/json:
            type: marketing.SuccessAds

/carts:
  post:
    is: [engaged]
    responses:
      200:
        body:
          application/json:
            type: products.SuccessCart

  /{cartId}:
    get:
      description: List the products for the given Store
      is: [engaged]
      responses:
        200:
          body:
            application/json:
              type: products.SuccessCart
    put:
      description: |
        Update cart content.
        Products can be added (put with body) and cleared (checkout)
      is: [engaged]
      queryParameters:
        checkout?: boolean
      body:
        application/json:
          type: products.CartProduct[]

    delete:
      description: Close the cart and delete without checkout


    /products/{productId}:
      put:
        description: Updates the amount of items of this product kind
        queryParameters:
          quantity: integer

      delete:
        description: All the items of this product from the cart

/locate:
  get:
    queryParameters:
      username:
        type: string
        required: false
        description: the iusernamed of the user that requests to be located
      beacons:
        type: string
        required: true
        description: |
          Set of fingerprints expressed as mac=level tuples. In the example we have two fingerprints,
          the first one is 24:a4:3c:9e:d2:84=16 and the second 32:a4:3c:9e:d2:84=10
        example: ?24%3Aa4%3A3c%3A9e%3Ad2%3A84%3D16%2C32%3Aa4%3A3c%3A9e%3Ad2%3A84%3D10
    responses:
      200:
        body:
          application/json:
            type: locations.SuccessLocations

/locations:
  put:
    body:
      application/json:
        type: locations.TrackingInformation
    responses:
      200:
        body:
          application/json:
            type: locations.SuccessLocation

  /{group}:
    get:
      responses:
        200:
          body:
            application/json:
              type: locations.SuccessLocations

    /{locationId}:
      delete:
        description: Removes the location identified by <<locationId>>
        responses:
          200:
            description: Returns the remaining locations
            body:
              application/json:
                type: !include types/successType.raml
